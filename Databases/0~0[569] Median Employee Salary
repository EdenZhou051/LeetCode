# solution 1

# 排序法
# 同时记录even_mid和odd_mid
# 判断长度是even or odd
# where clause来判断长度和选择相应的中位数

select t.id,t.company,t.salary
from
(
    select id,company,salary,
            count(1) over(partition by company) cnt,
            row_number() over(partition by company order by salary) rnk,
            count(1) over(partition by company)/2 even_mid,
            ceil(count(1) over(partition by company)/2) odd_mid
    from employee
) t
where (mod(cnt,2)=0 and rnk in (even_mid,even_mid+1)) or (mod(cnt,2)=1 and rnk=odd_mid)
order by company;


# solution 2 (COOL!)

# 排序法
# 利用公式：abs(rnk - (cnt+1)/2) < 1
# dist(rank,median) <= 0.5 < 1

select t.id,t.company,t.salary
from
(
    select id,company,salary,
            count(1) over(partition by company) cnt,
            row_number() over(partition by company order by salary) rnk
    from employee
) t
where abs(rnk-(cnt+1)/2)<1
order by company;


# solution 3

# 利用中位数的定义
# 中位数出现的频率一定大于等于大于它的数和小于它的数的绝对值之差
# 使用自连接
# 其中计算各个数的出现频率 sum(case when t1.Salary = t2.Salary then 1 else 0 end)
# 大于它的数和小于它的数的绝对值之差 abs(sum(sign(t1.Salary - t2.Salary)))

select t1.Id, t1.Company, t1.Salary
from Employee t1 LEFT JOIN Employee t2
ON t1.Company = t2.Company
group by t1.Company,t1.Salary
having sum(case 
	when t1.Salary = t2.Salary then 1
	else 0
end) >= abs(sum(sign(t1.Salary - t2.Salary)))
order by t1.Id;
